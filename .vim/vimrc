" vim: fdm=marker ts=2 sts=2 sw=2 fdl=0

" detect OS {{{
let s:is_windows = has('win32') || has('win64')
let s:is_cygwin = has('win32unix')
let s:is_macvim = has('gui_macvim')
"}}}

" dotvim settings {{{
if !exists('g:dotvim') || !exists('g:dotvim.version')
  echom 'The g:dotvim and g:dotvim.version variables must be defined.  Please consult the README.'
  finish
endif

if g:dotvim.version != 1
  echom 'The version number in your shim does not match the distribution version.  Please consult the README changelog section.'
  finish
endif

" initialize default settings
let s:settings = {}
let s:settings.default_indent = 2
let s:settings.max_column = 120
" let s:settings.autocomplete_method = 'neocomplcache'
let s:settings.enable_cursorcolumn = 0
if has('lua')
  let s:settings.autocomplete_method = 'neocomplete'
else
  let s:settings.autocomplete_method = 'ycm'
endif

if exists('g:dotvim.plugin_groups')
  let s:settings.plugin_groups = g:dotvim.plugin_groups
else
  let s:settings.plugin_groups = []
  call add(s:settings.plugin_groups, 'core')
  call add(s:settings.plugin_groups, 'web')
  call add(s:settings.plugin_groups, 'javascript')
  call add(s:settings.plugin_groups, 'ruby')
  call add(s:settings.plugin_groups, 'python')
  call add(s:settings.plugin_groups, 'scala')
  call add(s:settings.plugin_groups, 'go')
  call add(s:settings.plugin_groups, 'scm')
  call add(s:settings.plugin_groups, 'editing')
  call add(s:settings.plugin_groups, 'indents')
  call add(s:settings.plugin_groups, 'navigation')
  call add(s:settings.plugin_groups, 'unite')
  call add(s:settings.plugin_groups, 'autocomplete')
  " call add(s:settings.plugin_groups, 'textobj')
  call add(s:settings.plugin_groups, 'misc')
  if s:is_windows
    call add(s:settings.plugin_groups, 'windows')
  endif

  " exclude all language-specific plugins by default
  if !exists('g:dotvim.plugin_groups_exclude')
    let g:dotvim.plugin_groups_exclude = ['web','javascript','ruby','python','go','scala']
  endif
  for group in g:dotvim.plugin_groups_exclude
    let i = index(s:settings.plugin_groups, group)
    if i != -1
      call remove(s:settings.plugin_groups, i)
    endif
  endfor

  if exists('g:dotvim.plugin_groups_include')
    for group in g:dotvim.plugin_groups_include
      call add(s:settings.plugin_groups, group)
    endfor
  endif
endif

" override defaults with the ones specified in g:dotvim
for key in keys(s:settings)
  if has_key(g:dotvim, key)
    let s:settings[key] = g:dotvim[key]
  endif
endfor
"}}}

" functions {{{
function! Preserve(command) "{{{
  " preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " do the business:
  execute a:command
  " clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction "}}}
function! StripTrailingWhitespace() "{{{
  call Preserve("%s/\\s\\+$//e")
endfunction "}}}
function! EnsureExists(path) "{{{
  if !isdirectory(expand(a:path))
    call mkdir(expand(a:path))
  endif
endfunction "}}}
function! CloseWindowOrKillBuffer() "{{{
  let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

  " never bdelete a nerd tree
  if matchstr(expand("%"), 'NERD') == 'NERD'
    wincmd c
    return
  endif

  if number_of_windows_to_this_buffer > 1
    wincmd c
  else
    bdelete
  endif
endfunction "}}}
"}}}

" base configuration {{{
set timeoutlen=300                                  "mapping timeout
set ttimeoutlen=50                                  "keycode timeout

set mouse=a                                         "enable mouse
set mousehide                                       "hide when characters are typed
set history=1000                                    "number of command lines to remember
set ttyfast                                         "assume fast terminal connection
set viewoptions=folds,options,cursor,unix,slash     "unix/windows compatibility
set encoding=utf-8                                  "set encoding for text
set clipboard=unnamed
set hidden                                          "allow buffer switching without saving
set autoread                                        "auto reload if file saved externally
set fileformats+=mac                                "add mac to auto-detection of file format line endings
set nrformats-=octal                                "always assume decimal numbers
set showcmd
set tags=tags;/
set showfulltag
set modeline
set modelines=5

if s:is_windows && !s:is_cygwin
  " ensure correct shell in gvim
  set shell=c:\windows\system32\cmd.exe
endif

" whitespace
set backspace=indent,eol,start                      "allow backspacing everything in insert mode
set autoindent                                      "automatically indent to match adjacent lines
set expandtab                                       "spaces instead of tabs
set smarttab                                        "use shiftwidth to enter tabs
let &tabstop=s:settings.default_indent              "number of spaces per tab for display
let &softtabstop=s:settings.default_indent          "number of spaces per tab in insert mode
let &shiftwidth=s:settings.default_indent           "number of spaces when indenting
set list                                            "highlight whitespace
set listchars=tab:│\ ,trail:•,extends:❯,precedes:❮
set shiftround
set linebreak
let &showbreak='↪ '

set scrolloff=1                                     "always show content after scroll
set scrolljump=5                                    "minimum number of lines to scroll
set display+=lastline
set wildmenu                                        "show list for autocomplete
set wildmode=list:full
" set wildignorecase
" set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.idea/*,*/.DS_Store

set splitbelow
set splitright

" disable sounds
set noerrorbells
set novisualbell
set t_vb=

" searching
set hlsearch                                        "highlight searches
set incsearch                                       "incremental searching
set ignorecase                                      "ignore case for searching
set smartcase                                       "do case-sensitive if there's a capital letter
if executable('ack')
  set grepprg=ack\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow\ $*
  set grepformat=%f:%l:%c:%m
endif
if executable('ag')
  set grepprg=ag\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow
  set grepformat=%f:%l:%c:%m
endif

" load vundle
syntax on
filetype off
set nocompatible
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
call vundle#end()

" vim file/folder management {{{
" persistent undo
if exists('+undofile')
  set undofile
  set undodir=~/.vim/.cache/undo//
endif

" backups
set backup
set backupdir=~/.vim/.cache/backup//

" swap files
set directory=~/.vim/.cache/swap//
set noswapfile

call EnsureExists('~/.vim/.cache')
call EnsureExists(&undodir)
call EnsureExists(&backupdir)
call EnsureExists(&directory)
"}}}

let mapleader = ","
let g:mapleader = ","
"}}}

" ui configuration {{{
set showmatch                                       "automatically highlight matching braces/brackets/etc.
set matchtime=2                                     "tens of a second to show matching parentheses
set number
set lazyredraw
set laststatus=2
set noshowmode
set foldenable                                      "enable folds by default
set foldmethod=syntax                               "fold via syntax of files
set foldlevelstart=99                               "open all folds by default
let g:xml_syntax_folding=1                          "enable xml folding

set cursorline
autocmd WinLeave * setlocal nocursorline
autocmd WinEnter * setlocal cursorline
let &colorcolumn=s:settings.max_column
if s:settings.enable_cursorcolumn
  set cursorcolumn
  autocmd WinLeave * setlocal nocursorcolumn
  autocmd WinEnter * setlocal cursorcolumn
endif

if has('conceal')
  set conceallevel=1
  set listchars+=conceal:Δ
endif

if has('gui_running')
  " open maximized
  set lines=999 columns=9999
  if s:is_windows
    autocmd GUIEnter * simalt ~x
  endif

  set guioptions+=t                                 "tear off menu items
  set guioptions-=T                                 "toolbar icons

  if s:is_macvim
    set gfn=Ubuntu_Mono:h14
    set transparency=2
  endif

  if s:is_windows
    set gfn=Ubuntu_Mono:h10
  endif

  if has('gui_gtk')
    set gfn=Ubuntu\ Mono\ 11
  endif
else
  if $COLORTERM == 'gnome-terminal'
    set t_Co=256 "why you no tell me correct colors?!?!
  endif
  if $TERM_PROGRAM == 'iTerm.app'
    " different cursors for insert vs normal mode
    if exists('$TMUX')
      let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
      let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    else
      let &t_SI = "\<Esc>]50;CursorShape=1\x7"
      let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    endif
  endif
endif
"}}}

" plugin/mapping configuration {{{

Plugin 'rking/ag.vim'

Plugin 'Lokaltog/powerline'

if count(s:settings.plugin_groups, 'core') "{{{
  Plugin 'matchit.zip'
  Plugin 'bling/vim-airline' "{{{
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#left_sep=' '
  let g:airline#extensions#tabline#left_alt_sep='¦'
  "}}}
  " Plugin 'edkolev/tmuxline.vim' "{{{
  " let g:airline#extensions#tmuxline#enabled = 1
  " "}}}
  Plugin 'xolox/vim-misc'
  Plugin 'tpope/vim-surround'
  Plugin 'tpope/vim-repeat'
  Plugin 'tpope/vim-dispatch'
  Plugin 'tpope/vim-eunuch'
  Plugin 'xolox/vim-notes' "{{{
  :let g:notes_directories = ['~/Drive/Notes']
  "}}}
  Plugin 'tpope/vim-unimpaired' "{{{
  nmap <c-up> [e
  nmap <c-down> ]e
  vmap <c-up> [egv
  vmap <c-down> ]egv
  "}}}
endif "}}}
if count(s:settings.plugin_groups, 'web') "{{{
  Plugin 'groenewege/vim-less' "{{{
  nnoremap <Leader>m :w <BAR> !lessc % > %:t:r.css<CR><space>
  "}}}
  Plugin 'cakebaker/scss-syntax.vim'
  Plugin 'hail2u/vim-css3-syntax'
  Plugin 'ap/vim-css-color'
  Plugin 'othree/html5.vim'
  Plugin 'wavded/vim-stylus'
  Plugin 'digitaltoad/vim-jade'
  Plugin 'juvenn/mustache.vim'
  Plugin 'gregsexton/MatchTag'
  Plugin 'diepm/vim-rest-console'
  Plugin 'mattn/emmet-vim' "{{{
  function! s:zen_html_tab()
    let line = getline('.')
    if match(line, '<.*>') < 0
      return "\<c-y>,"
    endif
    return "\<c-y>n"
  endfunction
  autocmd FileType xml,xsl,xslt,xsd,css,sass,scss,less,mustache imap <buffer><tab> <c-y>,
  autocmd FileType html imap <buffer><expr><tab> <sid>zen_html_tab()
  "}}}
endif "}}}
if count(s:settings.plugin_groups, 'javascript') "{{{
  Plugin 'bigfish/vim-js-context-coloring'
  Plugin 'burnettk/vim-angular'
  Plugin 'claco/jasmine.vim'
  Plugin 'pangloss/vim-javascript'
  Plugin 'maksimr/vim-jsbeautify'
  "{{{
  nnoremap <leader>j :call JsBeautify()<cr>
  "}}}
  Plugin 'leafgarland/typescript-vim'
  Plugin 'Shougo/vimproc.vim'
  Plugin 'Quramy/tsuquyomi'
  Plugin 'Quramy/vim-js-pretty-template'

  " TypeScript plugin
  autocmd FileType typescript setlocal completeopt+=menu,preview
  let g:SuperTabDefaultCompletionType = "<C-x><C-o>"
  let g:syntastic_typescript_tsc_fname = ''

  Plugin 'kchmck/vim-coffee-script'
  Plugin 'mmalecki/vim-node.js'
  Plugin 'leshill/vim-json'
  Plugin 'othree/javascript-libraries-syntax.vim'
endif "}}}
if count(s:settings.plugin_groups, 'ruby') "{{{
  Plugin 'tpope/vim-rails'
  Plugin 'tpope/vim-bundler'
endif "}}}
if count(s:settings.plugin_groups, 'python') "{{{
  Plugin 'klen/python-mode'
  "{{{
  let g:pymode_rope=0
  "}}}
  Plugin 'davidhalter/jedi-vim'
  "{{{
  let g:jedi#popup_on_dot=0
  "}}}
endif "}}}
if count(s:settings.plugin_groups, 'scala') "{{{
  Plugin 'derekwyatt/vim-scala'
  Plugin 'megaannum/vimside'
endif "}}}
if count(s:settings.plugin_groups, 'go') "{{{
  Plugin 'fatih/vim-go'
endif "}}}
if count(s:settings.plugin_groups, 'scm') "{{{
  Plugin 'mhinz/vim-signify' "{{{
  let g:signify_update_on_bufenter=0
  "}}}
  Plugin 'tpope/vim-fugitive' "{{{
  nnoremap <silent> <leader>gs :Gstatus<CR>
  nnoremap <silent> <leader>gd :Gvdiff<CR> :call g:Invert()<CR>
  nnoremap <silent> <leader>gc :Gcommit<CR>
  nnoremap <silent> <leader>gb :Gblame<CR>
  nnoremap <silent> <leader>gl :Glog<CR>
  nnoremap <silent> <leader>gp :Git push<CR>
  nnoremap <silent> <leader>gw :Gwrite<CR>
  nnoremap <silent> <leader>gr :Gremove<CR>
  autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>
  autocmd BufReadPost fugitive://* set bufhidden=delete
  "}}}
  Plugin 'airblade/vim-gitgutter'
  Plugin 'gregsexton/gitv' "{{{
  nnoremap <silent> <leader>gv :Gitv<CR>
  nnoremap <silent> <leader>gV :Gitv!<CR>
  "}}}
endif "}}}
if count(s:settings.plugin_groups, 'autocomplete') "{{{
  Plugin 'honza/vim-snippets'
  if s:settings.autocomplete_method == 'neocomplete' "{{{
    " Plugin 'Shougo/neocomplete.vim' "{{{
    " let g:neocomplete#enable_at_startup=1
    " let g:neocomplete#data_directory='~/.vim/.cache/neocomplete'
    "}}}
  endif "}}}
  if s:settings.autocomplete_method == 'neocomplcache' "{{{
    Plugin 'Shougo/neocomplcache.vim' "{{{
    let g:neocomplcache_enable_at_startup=1
    let g:neocomplcache_temporary_dir='~/.vim/.cache/neocomplcache'
    let g:neocomplcache_enable_fuzzy_completion=1
    "}}}
  endif "}}}
  if s:settings.autocomplete_method == 'ycm' "{{{
    Plugin 'Valloric/YouCompleteMe' "{{{
    let g:ycm_complete_in_comments_and_strings=1
    let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
    let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']
    let g:ycm_filetype_blacklist={'unite': 1}
    "}}}
    " Plugin 'SirVer/ultisnips' "{{{
    " let g:UltiSnipsExpandTrigger="<tab>"
    " let g:UltiSnipsJumpForwardTrigger="<tab>"
    " let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
    " let g:UltiSnipsSnippetsDir='~/.vim/snippets'
    " let g:UltiSnipsEditSplit="vertical"
    " "}}}
  else
    Plugin 'Shougo/neosnippet.vim' "{{{
    let g:neosnippet#snippets_directory='~/.vim/snippets'
    let g:neosnippet#enable_snipmate_compatibility=1
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)
    "}}}
    Plugin 'Shougo/neosnippet-snippets'
  endif "}}}
endif "}}}
if count(s:settings.plugin_groups, 'editing') "{{{
  " Plugin 'editorconfig/editorconfig-vim', {'autoload':{'insert':1}}
  Plugin 'tpope/vim-endwise'
  Plugin 'tpope/vim-speeddating'
  Plugin 'thinca/vim-visualstar'
  Plugin 'tomtom/tcomment_vim'
  Plugin 'terryma/vim-expand-region'
  Plugin 'terryma/vim-multiple-cursors'
  Plugin 'chrisbra/NrrwRgn'
  Plugin 'dahu/vim-fanfingtastic'
  Plugin 'godlygeek/tabular' "{{{
  nmap <Leader>a& :Tabularize /&<CR>
  vmap <Leader>a& :Tabularize /&<CR>
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:<CR>
  vmap <Leader>a: :Tabularize /:<CR>
  nmap <Leader>a:: :Tabularize /:\zs<CR>
  vmap <Leader>a:: :Tabularize /:\zs<CR>
  nmap <Leader>a, :Tabularize /,<CR>
  vmap <Leader>a, :Tabularize /,<CR>
  nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
  vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
  "}}}
  Plugin 'jiangmiao/auto-pairs'
  Plugin 'easymotion/vim-easymotion' "{{{
  " <Leader>f{char} to move to {char}
  map  <Leader>f <Plug>(easymotion-bd-f)
  nmap <Leader>f <Plug>(easymotion-overwin-f)

  " s{char}{char} to move to {char}{char}
  nmap s <Plug>(easymotion-overwin-f2)

  " Move to line
  map <Leader>L <Plug>(easymotion-bd-jk)
  nmap <Leader>L <Plug>(easymotion-overwin-line)

  " Move to word
  map  <Leader>w <Plug>(easymotion-bd-w)
  nmap <Leader>w <Plug>(easymotion-overwin-w)

  "}}}
endif "}}}
if count(s:settings.plugin_groups, 'navigation') "{{{
  Plugin 'mileszs/ack.vim' "{{{
  if executable('ag')
    let g:ackprg = "ag --nogroup --column --smart-case --follow"
  endif
  "}}}
  Plugin 'mbbill/undotree' "{{{
  let g:undotree_WindowLayout='botright'
  let g:undotree_SetFocusWhenToggle=1
  nnoremap <silent> <F5> :UndotreeToggle<CR>
  "}}}
  Plugin 'EasyGrep' "{{{
  let g:EasyGrepRecursive=1
  let g:EasyGrepAllOptionsInExplorer=1
  let g:EasyGrepCommand=1
  nnoremap <leader>vo :GrepOptions<cr>
  "}}}
  Plugin 'kien/ctrlp.vim' "{{{
  let g:ctrlp_clear_cache_on_exit=1
  let g:ctrlp_max_height=40
  let g:ctrlp_show_hidden=0
  let g:ctrlp_follow_symlinks=1
  let g:ctrlp_working_path_mode=0

  let g:ctrlp_max_files=20000
  let g:ctrlp_cache_dir='~/.vim/.cache/ctrlp'
  let g:ctrlp_reuse_window='startify'
  let g:ctrlp_extensions=['funky']
  if executable('ag')
    let g:ctrlp_user_command='ag %s -l --nocolor -g ""'
  endif

  nmap \ [ctrlp]
  nnoremap [ctrlp] <nop>

  nnoremap [ctrlp]t :CtrlPBufTag<cr>
  nnoremap [ctrlp]T :CtrlPTag<cr>
  nnoremap [ctrlp]l :CtrlPLine<cr>
  nnoremap [ctrlp]o :CtrlPFunky<cr>
  nnoremap [ctrlp]b :CtrlPBuffer<cr>
  "}}}
  Plugin 'scrooloose/nerdtree' "{{{
  let NERDTreeShowHidden=1
  let NERDTreeQuitOnOpen=0
  let NERDTreeShowLineNumbers=1
  let NERDTreeChDirMode=0
  let NERDTreeShowBookmarks=1
  let NERDTreeIgnore=['\.git','\.hg']
  let NERDTreeBookmarksFile='~/.vim/.cache/NERDTreeBookmarks'
  let NERDTreeMapOpenInTab='<ENTER>'
  nnoremap <F2> :NERDTreeToggle<CR>
  nnoremap <F3> :NERDTreeFind<CR>
  "}}}
  Plugin 'majutsushi/tagbar' "{{{
  nnoremap <silent> <F9> :TagbarToggle<CR>
  "}}}
endif "}}}
if count(s:settings.plugin_groups, 'unite') "{{{

  Plugin 'osyo-manga/unite-airline_themes' "{{{
  nnoremap <silent> [unite]a :<C-u>Unite -winheight=10 -auto-preview -buffer-name=airline_themes airline_themes<cr>
  "}}}
  Plugin 'ujihisa/unite-colorscheme' "{{{
  nnoremap <silent> [unite]c :<C-u>Unite -winheight=10 -auto-preview -buffer-name=colorschemes colorscheme<cr>
  "}}}
  Plugin 'tsukkee/unite-tag' "{{{
  nnoremap <silent> [unite]t :<C-u>Unite -auto-resize -buffer-name=tag tag tag/file<cr>
  "}}}
  Plugin 'Shougo/unite-outline' "{{{
  nnoremap <silent> [unite]o :<C-u>Unite -auto-resize -buffer-name=outline outline<cr>
  "}}}
  Plugin 'Shougo/unite-help' "{{{
  nnoremap <silent> [unite]h :<C-u>Unite -auto-resize -buffer-name=help help<cr>
  "}}}
  Plugin 'Shougo/junkfile.vim' "{{{
  let g:junkfile#directory=expand("~/.vim/.cache/junk")
  nnoremap <silent> [unite]j :<C-u>Unite -auto-resize -buffer-name=junk junkfile junkfile/new<cr>
  "}}}
endif "}}}
if count(s:settings.plugin_groups, 'indents') "{{{
  Plugin 'nathanaelkane/vim-indent-guides' "{{{
  let g:indent_guides_start_level=1
  let g:indent_guides_guide_size=1
  let g:indent_guides_enable_on_vim_startup=0
  let g:indent_guides_color_change_percent=3
  if !has('gui_running')
    let g:indent_guides_auto_colors=0
    function! s:indent_set_console_colors()
      hi IndentGuidesOdd ctermbg=235
      hi IndentGuidesEven ctermbg=236
    endfunction
    autocmd VimEnter,Colorscheme * call s:indent_set_console_colors()
  endif
  "}}}
endif "}}}
if count(s:settings.plugin_groups, 'textobj') "{{{
  Plugin 'kana/vim-textobj-user'
  Plugin 'kana/vim-textobj-indent'
  Plugin 'kana/vim-textobj-entire'
  Plugin 'lucapette/vim-textobj-underscore'
endif "}}}
if count(s:settings.plugin_groups, 'misc') "{{{
  Plugin 'gilsondev/searchtasks.vim'
  if exists('$TMUX')
    Plugin 'christoomey/vim-tmux-navigator'
  endif
  Plugin 'kana/vim-vspec'
  Plugin 'zaiste/tmux.vim'
  Plugin 'tpope/vim-scriptease'
  Plugin 'tpope/vim-markdown'
  if executable('redcarpet') && executable('instant-markdown-d')
    Plugin 'suan/vim-instant-markdown'
  endif
  Plugin 'guns/xterm-color-table.vim'
  Plugin 'chrisbra/vim_faq'
  Plugin 'vimwiki'
  Plugin 'bufkill.vim'
  Plugin 'mhinz/vim-startify' "{{{
  let g:startify_session_dir = '~/.vim/.cache/sessions'
  let g:startify_change_to_vcs_root = 1
  let g:startify_show_sessions = 1
  nnoremap <F1> :Startify<cr>
  "}}}
  Plugin 'scrooloose/syntastic' "{{{
  let g:syntastic_error_symbol = '✗'
  let g:syntastic_style_error_symbol = '✠'
  let g:syntastic_warning_symbol = '∆'
  let g:syntastic_style_warning_symbol = '≈'
  "}}}
  Plugin 'mattn/gist-vim', { 'depends': 'mattn/webapi-vim', 'autoload': { 'commands': 'Gist' } } "{{{
  let g:gist_post_private=1
  let g:gist_show_privates=1
  "}}}
  Plugin 'Shougo/vimshell.vim', {'autoload':{'commands':[ 'VimShell', 'VimShellInteractive' ]}} "{{{
  if s:is_macvim
    let g:vimshell_editor_command='mvim'
  else
    let g:vimshell_editor_command='vim'
  endif
  let g:vimshell_right_prompt='getcwd()'
  let g:vimshell_temporary_directory='~/.vim/.cache/vimshell'
  let g:vimshell_vimshrc_path='~/.vim/vimshrc'

  nnoremap <leader>c :VimShell -split<cr>
  nnoremap <leader>cc :VimShell -split<cr>
  nnoremap <leader>cn :VimShellInteractive node<cr>
  nnoremap <leader>cl :VimShellInteractive lua<cr>
  nnoremap <leader>cr :VimShellInteractive irb<cr>
  nnoremap <leader>cp :VimShellInteractive python<cr>
  "}}}
  Plugin 'zhaocai/GoldenView.Vim', {'autoload':{'mappings':['<Plug>ToggleGoldenViewAutoResize']}} "{{{
  let g:goldenview__enable_default_mapping=0
  nmap <F4> <Plug>ToggleGoldenViewAutoResize
  "}}}
endif "}}}
if count(s:settings.plugin_groups, 'windows') "{{{
  Plugin 'PProvost/vim-ps1' "{{{
  autocmd BufNewFile,BufRead *.ps1,*.psd1,*.psm1 setlocal ft=ps1
  "}}}
  Plugin 'nosami/Omnisharp'
endif "}}}

"}}}

" mappings {{{
" formatting shortcuts
nmap <leader>fef :call Preserve("normal gg=G")<CR>
nmap <leader>f$ :call StripTrailingWhitep>pace()<CR>
vmap <leader>s :sort<cr>

" toggle paste
map <F6> :set invpaste<CR>:set paste?<CR>

" remap arrow keys
nnoremap <left> :bprev<CR>
nnoremap <right> :bnext<CR>
nnoremap <up> :tabnext<CR>
nnoremap <down> :tabprev<CR>

" smash escape
inoremap jk <esc>
inoremap kj <esc>

" change cursor position in insert mode
inoremap <C-h> <left>
inoremap <C-l> <right>

inoremap <C-u> <C-g>u<C-u>

if mapcheck('<space>/') == ''
  nnoremap <space>/ :Ack ''<Left>
endif

" sane regex {{{
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v
nnoremap :s/ :s/\v
" }}}

" command-line window {{{
nnoremap q: q:i
nnoremap q/ q/i
nnoremap q? q?i
" }}}

" folds {{{
nnoremap zr zr:echo &foldlevel<cr>
nnoremap zm zm:echo &foldlevel<cr>
nnoremap zR zR:echo &foldlevel<cr>
nnoremap zM zM:echo &foldlevel<cr>
" }}}

" screen line scroll
nnoremap <silent> j gj
nnoremap <silent> k gk

" auto center {{{
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz
nnoremap <silent> <C-o> <C-o>zz
nnoremap <silent> <C-i> <C-i>zz
"}}}

" reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

" reselect last paste
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" find current word in quickfix
nnoremap <leader>fw :execute "vimgrep ".expand("<cword>")." %"<cr>:copen<cr>
" find last search in quickfix
nnoremap <leader>ff :execute 'vimgrep /'.@/.'/g %'<cr>:copen<cr>

" shortcuts for windows {{{
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s
nnoremap <leader>vsa :vert sba<cr>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
"}}}

" tab shortcuts
map <leader>tn :tabnew<CR>
map <leader>tc :tabclose<CR>

" make Y consistent with C and D. See :help Y.
nnoremap Y y$

" hide annoying quit message
nnoremap <C-c> <C-c>:echo<cr>

" window killer
nnoremap <silent> Q :call CloseWindowOrKillBuffer()<cr>

" quick buffer open
nnoremap gb :ls<cr>:e #

" general
nmap <leader>l :set list! list?<cr>
nnoremap <BS> :set hlsearch! hlsearch?<cr>

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" helpers for profiling {{{
nnoremap <silent> <leader>DD :exe ":profile start profile.log"<cr>:exe ":profile func *"<cr>:exe ":profile file *"<cr>
nnoremap <silent> <leader>DP :exe ":profile pause"<cr>
nnoremap <silent> <leader>DC :exe ":profile continue"<cr>
nnoremap <silent> <leader>DQ :exe ":profile pause"<cr>:noautocmd qall!<cr>
"}}}
"}}}

" commands {{{
command! -bang Q q<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
"}}}

" autocmd {{{
" go back to previous position of cursor if any
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \  exe 'normal! g`"zvzz' |
      \ endif

" autocmd FileType js,scss,css autocmd BufWritePre <buffer> call StripTrailingWhitespace()
autocmd FileType css,scss setlocal foldmethod=marker foldmarker={,}
autocmd FileType css,scss nnoremap <silent> <leader>S vi{:sort<CR>
autocmd FileType python setlocal foldmethod=indent
autocmd FileType markdown setlocal nolist
autocmd FileType vim setlocal fdm=indent keywordprg=:help
"}}}

" color schemes {{{
Plugin 'altercation/vim-colors-solarized' "{{{
let g:solarized_termcolors=256
let g:solarized_termtrans=1
"}}}
Plugin 'nanotech/jellybeans.vim'
Plugin 'tomasr/molokai'
Plugin 'endel/vim-github-colorscheme'
Plugin 'chriskempson/vim-tomorrow-theme'
Plugin 'chriskempson/base16-vim'
Plugin 'w0ng/vim-hybrid'
Plugin 'sjl/badwolf'
Plugin 'zeis/vim-kolor' "{{{
let g:kolor_underlined=1
"}}}
set t_Co=256
let base16colorspace=256
exec 'colorscheme '.g:dotvim.colorscheme
"}}}

" Vundle Fix for coffeescript 
filetype plugin indent on
